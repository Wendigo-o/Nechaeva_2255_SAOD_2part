class WF
{ 
public:
	int* pm;
	int M;
	int N;
	std::vector<std::string> prevVersion, curVersion;
	WF() {
	}
	void Compare(std::istream& prev, std::istream& current) {
		char buf[512];
		while (prev.good()){
			M++;
			prev.getline(buf, sizeof(buf));
			prevVersion.push_back(buf);}
		while (current.good()){
			N++;
			current.getline(buf, sizeof(buf));
			curVersion.push_back(buf);}
		pm = new int[(N + 1) * (M + 1)];
		for (int i = 0; i <= M; i++)
			pm[i] = i;
		for (int i = 1; i <= N; i++)
			pm[i * (M + 1)] = i;
		int p;
		for (int i = 1; i <= M; i++)
			for (int j = 1; j <= N; j++){
				p = (curVersion[j - 1] == prevVersion[i - 1]) ? 0 : 1;
				pm[i + (M + 1) * j] = std::min(std::min(pm[(i - 1) + (M + 1) * j] + 1, pm[i + (M + 1) * (j - 1)] + 1), pm[(i - 1) + (M + 1) * (j - 1)] + p);}
	}
	//возвращает количество строк матрицы Вагнера-Фишера;
	int Rows() const {return N + 1;}

	//возвращает количество столбцов матрицы;
	int Columns() const {return M + 1;}

	//возвращает значение i - го, j - го элемента матрицы;
	int Get(int i, int j) const {return (pm[i + M * j]);}

	//задает значение i-го,j-го элемента матрицы;
	void Set(int i, int j, int val) {
		pm[i + M * j] = val;
	}
	//возвращает расстояние между последовательностями, которыми проинициализирован объект.
	int Distance() const {return pm[(N + 1) * (M + 1) - 1];}

	~WF(){delete[] pm;}
};
